// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/ikasamt/zapp/zapp"
)

// select All
func selectAllUsers(selects string) (instances []*User) {
	db := GetMasterDBInstance()
	defer db.Close()
	db.Debug().Select(selects).Find(&instances)
	return
}

// fetch One
func fetchUser(anyID int) (any User) {
	db := GetMasterDBInstance()
	defer db.Close()
	db.Debug().Where("id = ?", anyID).First(&any)
	any.beforeJSON = zapp.CallMethod(any, `AsJSON`, gin.H{}).(gin.H)
	return any
}

// get One
func getUser(c *gin.Context) (instance User, e error) {
	// 対象IDを取得
	ID, err := zapp.GetID(c)
	if err != nil {
		return instance, err
	}
	// DBから取得
	instance = fetchUser(ID)
	return instance, nil
}

// select All
func selectAllOrganizations(selects string) (instances []*Organization) {
	db := GetMasterDBInstance()
	defer db.Close()
	db.Debug().Select(selects).Find(&instances)
	return
}

// fetch One
func fetchOrganization(anyID int) (any Organization) {
	db := GetMasterDBInstance()
	defer db.Close()
	db.Debug().Where("id = ?", anyID).First(&any)
	any.beforeJSON = zapp.CallMethod(any, `AsJSON`, gin.H{}).(gin.H)
	return any
}

// get One
func getOrganization(c *gin.Context) (instance Organization, e error) {
	// 対象IDを取得
	ID, err := zapp.GetID(c)
	if err != nil {
		return instance, err
	}
	// DBから取得
	instance = fetchOrganization(ID)
	return instance, nil
}
